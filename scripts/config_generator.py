#!/usr/bin/env python3
"""
Configuration Generation Templates

Generate configuration file templates for different experiment types and use cases.
Helps create properly structured V2 configuration files with appropriate defaults.

Usage:
    python scripts/config_generator.py --template basic --output my_config.yaml
    python scripts/config_generator.py --template hybrid --task gear_mesh --output gear_hybrid.yaml
    python scripts/config_generator.py --template multi_agent --agents 4 --output multi_agent.yaml
    python scripts/config_generator.py --list-templates
"""

import argparse
import sys
from pathlib import Path
from typing import Dict, Any, Optional

# Add project root to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


class ConfigTemplateGenerator:
    """Generator for configuration file templates."""

    def __init__(self):
        self.templates = {
            'basic': self._generate_basic_template,
            'hybrid': self._generate_hybrid_template,
            'multi_agent': self._generate_multi_agent_template,
            'debug': self._generate_debug_template,
            'production': self._generate_production_template,
            'minimal': self._generate_minimal_template
        }

    def list_templates(self) -> None:
        """List available configuration templates."""
        print("Available configuration templates:")
        print("")

        descriptions = {
            'basic': "Standard factory training configuration with common settings",
            'hybrid': "Hybrid force-position control configuration with force-torque sensor",
            'multi_agent': "Multi-agent training with multiple break force conditions",
            'debug': "Debug configuration with verbose logging and short training",
            'production': "Production-ready configuration with optimized settings",
            'minimal': "Minimal configuration with only essential parameters"
        }

        for template_name in sorted(self.templates.keys()):
            desc = descriptions.get(template_name, "No description available")
            print(f"  {template_name:12} - {desc}")

        print("")
        print("Usage: python scripts/config_generator.py --template TEMPLATE_NAME --output CONFIG_FILE")

    def generate_config(self, template_name: str, **kwargs) -> Dict[str, Any]:
        """
        Generate configuration from template.

        Args:
            template_name: Name of template to use
            **kwargs: Template-specific parameters

        Returns:
            Configuration dictionary
        """
        if template_name not in self.templates:
            available = ", ".join(sorted(self.templates.keys()))
            raise ValueError(f"Unknown template '{template_name}'. Available: {available}")

        return self.templates[template_name](**kwargs)

    def _generate_basic_template(self, task: str = "peg_insert", **kwargs) -> Dict[str, Any]:
        """Generate basic factory training configuration."""
        task_names = {
            'peg_insert': "Isaac-Factory-PegInsert-Direct-v0",
            'gear_mesh': "Isaac-Factory-GearMesh-Direct-v0",
            'nut_thread': "Isaac-Factory-NutThread-Direct-v0"
        }

        return {
            "# Basic Factory Training Configuration": None,
            "# Generated by config_generator.py": None,
            "": None,
            "task_name": task_names.get(task, task),
            "": None,
            "# Primary configuration": None,
            "primary": {
                "agents_per_break_force": 2,
                "num_envs_per_agent": 256,
                "break_forces": -1,  # Unbreakable
                "decimation": 8,
                "policy_hz": 15,
                "max_steps": 10240000,
                "debug_mode": False,
                "seed": -1
            },
            " ": None,
            "# Environment configuration": None,
            "environment": {
                "filter_collisions": True
            },
            "  ": None,
            "# Model configuration": None,
            "model": {
                "use_hybrid_agent": False,
                "actor": {
                    "n": 1,
                    "latent_size": 256
                },
                "critic": {
                    "n": 3,
                    "latent_size": 1024
                }
            },
            "   ": None,
            "# Wrapper configuration": None,
            "wrappers": {
                "force_torque_sensor": {
                    "enabled": False
                },
                "wandb_logging": {
                    "enabled": True,
                    "wandb_project": "Factory_Training",
                    "wandb_entity": "YOUR_ENTITY",
                    "wandb_group": "basic_experiments"
                }
            },
            "    ": None,
            "# Agent configuration": None,
            "agent": {
                "policy_learning_rate": 1.0e-6,
                "critic_learning_rate": 1.0e-5,
                "learning_epochs": 4,
                "discount_factor": 0.99,
                "lambda_": 0.95
            }
        }

    def _generate_hybrid_template(self, task: str = "peg_insert", **kwargs) -> Dict[str, Any]:
        """Generate hybrid force-position control configuration."""
        task_names = {
            'peg_insert': "Isaac-Factory-PegInsert-Direct-v0",
            'gear_mesh': "Isaac-Factory-GearMesh-Direct-v0",
            'nut_thread': "Isaac-Factory-NutThread-Direct-v0"
        }

        return {
            "# Hybrid Force-Position Control Configuration": None,
            "# Generated by config_generator.py": None,
            "": None,
            "task_name": task_names.get(task, task),
            " ": None,
            "# Primary configuration": None,
            "primary": {
                "agents_per_break_force": 2,
                "num_envs_per_agent": 256,
                "break_forces": -1,
                "decimation": 8,
                "policy_hz": 15,
                "max_steps": 15360000,  # Longer training for hybrid
                "debug_mode": False,
                "seed": -1
            },
            "  ": None,
            "# Environment configuration": None,
            "environment": {
                "filter_collisions": True,
                "ctrl": {
                    "force_action_bounds": [50.0, 50.0, 50.0],
                    "torque_action_bounds": [0.5, 0.5, 0.5],
                    "force_action_threshold": [10.0, 10.0, 10.0],
                    "torque_action_threshold": [0.1, 0.1, 0.1]
                }
            },
            "   ": None,
            "# Model configuration": None,
            "model": {
                "use_hybrid_agent": True,
                "critic_output_init_mean": 60,
                "actor": {
                    "n": 1,
                    "latent_size": 256
                },
                "critic": {
                    "n": 3,
                    "latent_size": 1024
                },
                "hybrid_agent": {
                    "ctrl_torque": False,
                    "pos_scale": 1.0,
                    "rot_scale": 1.0,
                    "force_scale": 1.0,
                    "torque_scale": 1.0,
                    "selection_adjustment_types": "none",
                    "init_bias": -2.5,
                    "uniform_sampling_rate": 0.0
                }
            },
            "    ": None,
            "# Wrapper configuration": None,
            "wrappers": {
                "force_torque_sensor": {
                    "enabled": True,
                    "use_tanh_scaling": False,
                    "tanh_scale": 0.05
                },
                "hybrid_control": {
                    "enabled": True,
                    "reward_type": "simp"
                },
                "wandb_logging": {
                    "enabled": True,
                    "wandb_project": "Hybrid_Control_RL",
                    "wandb_entity": "YOUR_ENTITY",
                    "wandb_group": "hybrid_experiments",
                    "wandb_tags": ["hybrid_control", "force_position"]
                }
            },
            "     ": None,
            "# Agent configuration": None,
            "agent": {
                "policy_learning_rate": 5.0e-7,  # Lower for hybrid stability
                "critic_learning_rate": 1.0e-5,
                "learning_epochs": 6,  # More epochs for complex learning
                "discount_factor": 0.99,
                "lambda_": 0.95
            }
        }

    def _generate_multi_agent_template(self, agents: int = 3, **kwargs) -> Dict[str, Any]:
        """Generate multi-agent configuration with multiple break forces."""
        break_forces = [25, 50, 75, 100, 150][:agents] if agents <= 5 else list(range(25, 25 + agents * 25, 25))

        return {
            "# Multi-Agent Training Configuration": None,
            "# Generated by config_generator.py": None,
            f"# {agents} agents across {len(break_forces)} break force conditions": None,
            "": None,
            "task_name": "Isaac-Factory-PegInsert-Direct-v0",
            " ": None,
            "# Primary configuration": None,
            "primary": {
                "agents_per_break_force": 1,  # 1 agent per condition
                "num_envs_per_agent": 256,
                "break_forces": break_forces,
                f"# Total agents: {len(break_forces)} conditions × 1 agent = {len(break_forces)} agents": None,
                f"# Total envs: {len(break_forces)} agents × 256 envs = {len(break_forces) * 256} envs": None,
                "decimation": 8,
                "policy_hz": 15,
                "max_steps": 20480000,  # Longer training for multi-agent
                "debug_mode": False,
                "seed": -1
            },
            "  ": None,
            "# Environment configuration": None,
            "environment": {
                "filter_collisions": True
            },
            "   ": None,
            "# Model configuration": None,
            "model": {
                "use_hybrid_agent": False,
                "actor": {
                    "n": 1,
                    "latent_size": 512  # Larger for multi-agent
                },
                "critic": {
                    "n": 3,
                    "latent_size": 2048  # Larger for multi-agent
                }
            },
            "    ": None,
            "# Wrapper configuration": None,
            "wrappers": {
                "fragile_objects": {
                    "enabled": True
                    # break_force and num_agents computed automatically
                },
                "wandb_logging": {
                    "enabled": True,
                    "wandb_project": "Multi_Agent_RL",
                    "wandb_entity": "YOUR_ENTITY",
                    "wandb_group": "multi_agent_experiments",
                    "wandb_tags": ["multi_agent", "break_forces"]
                }
            },
            "     ": None,
            "# Agent configuration": None,
            "agent": {
                "policy_learning_rate": 8.0e-7,  # Lower for stability with many agents
                "critic_learning_rate": 8.0e-6,
                "learning_epochs": 5,
                "discount_factor": 0.99,
                "lambda_": 0.95
            }
        }

    def _generate_debug_template(self, **kwargs) -> Dict[str, Any]:
        """Generate debug configuration for development."""
        return {
            "# Debug Configuration for Development": None,
            "# Generated by config_generator.py": None,
            "# Fast loading, short training, verbose logging": None,
            "": None,
            "task_name": "Isaac-Factory-PegInsert-Direct-v0",
            " ": None,
            "# Primary configuration": None,
            "primary": {
                "agents_per_break_force": 1,  # Single agent for speed
                "num_envs_per_agent": 64,  # Fewer envs for speed
                "break_forces": -1,
                "decimation": 4,  # Faster simulation
                "policy_hz": 30,  # Higher frequency
                "max_steps": 100000,  # Short training
                "debug_mode": True,  # Enable debug logging
                "seed": 42  # Fixed seed for reproducibility
            },
            "  ": None,
            "# Environment configuration": None,
            "environment": {
                "filter_collisions": True
            },
            "   ": None,
            "# Model configuration": None,
            "model": {
                "use_hybrid_agent": False,
                "actor": {
                    "n": 1,
                    "latent_size": 128  # Smaller for speed
                },
                "critic": {
                    "n": 2,
                    "latent_size": 256  # Smaller for speed
                }
            },
            "    ": None,
            "# Wrapper configuration": None,
            "wrappers": {
                "wandb_logging": {
                    "enabled": False  # Disable for debugging
                }
            },
            "     ": None,
            "# Agent configuration": None,
            "agent": {
                "policy_learning_rate": 5.0e-6,  # Higher for faster learning
                "critic_learning_rate": 5.0e-5,
                "learning_epochs": 2,  # Fewer epochs for speed
                "discount_factor": 0.99,
                "lambda_": 0.95
            }
        }

    def _generate_production_template(self, **kwargs) -> Dict[str, Any]:
        """Generate production-ready configuration."""
        return {
            "# Production Configuration": None,
            "# Generated by config_generator.py": None,
            "# Optimized for performance and stability": None,
            "": None,
            "task_name": "Isaac-Factory-PegInsert-Direct-v0",
            " ": None,
            "# Primary configuration": None,
            "primary": {
                "agents_per_break_force": 2,
                "num_envs_per_agent": 512,  # More envs for stability
                "break_forces": -1,
                "decimation": 8,
                "policy_hz": 15,
                "max_steps": 51200000,  # Long training
                "debug_mode": False,
                "seed": -1,
                "ckpt_tracker_path": "/path/to/ckpt_tracker.txt"
            },
            "  ": None,
            "# Environment configuration": None,
            "environment": {
                "filter_collisions": True
            },
            "   ": None,
            "# Model configuration": None,
            "model": {
                "use_hybrid_agent": False,
                "actor": {
                    "n": 2,  # Deeper network
                    "latent_size": 512
                },
                "critic": {
                    "n": 4,  # Deeper network
                    "latent_size": 2048
                }
            },
            "    ": None,
            "# Wrapper configuration": None,
            "wrappers": {
                "observation_noise": {
                    "enabled": True,  # Domain randomization
                    "global_scale": 0.8,
                    "apply_to_critic": False
                },
                "wandb_logging": {
                    "enabled": True,
                    "wandb_project": "Production_RL",
                    "wandb_entity": "YOUR_ENTITY",
                    "wandb_group": "production_runs"
                }
            },
            "     ": None,
            "# Agent configuration": None,
            "agent": {
                "policy_learning_rate": 3.0e-7,  # Conservative for stability
                "critic_learning_rate": 3.0e-6,
                "learning_epochs": 8,  # More epochs for better learning
                "discount_factor": 0.999,  # Higher for long episodes
                "lambda_": 0.98,
                "use_huber_value_loss": True,
                "grad_norm_clip": 0.5,
                "time_limit_bootstrap": True
            }
        }

    def _generate_minimal_template(self, **kwargs) -> Dict[str, Any]:
        """Generate minimal configuration with only essential parameters."""
        return {
            "# Minimal Configuration": None,
            "# Generated by config_generator.py": None,
            "": None,
            "task_name": "Isaac-Factory-PegInsert-Direct-v0",
            " ": None,
            "primary": {
                "agents_per_break_force": 1,
                "num_envs_per_agent": 64,
                "max_steps": 1000000
            },
            "  ": None,
            "model": {
                "use_hybrid_agent": False
            },
            "   ": None,
            "wrappers": {
                "wandb_logging": {
                    "enabled": False
                }
            }
        }

    def save_config(self, config: Dict[str, Any], output_path: str) -> None:
        """
        Save configuration to YAML file with proper formatting.

        Args:
            config: Configuration dictionary
            output_path: Output file path
        """
        import yaml

        # Custom YAML representer to handle None values as comments
        def represent_none(self, data):
            return self.represent_scalar('tag:yaml.org,2002:null', '')

        yaml.add_representer(type(None), represent_none)

        # Convert config to YAML string
        yaml_content = yaml.dump(config, default_flow_style=False, sort_keys=False, indent=2)

        # Post-process to clean up formatting
        lines = []
        for line in yaml_content.split('\n'):
            # Handle comment lines (keys with None values)
            if line.strip().endswith(': \'\'') or line.strip().endswith(': ""'):
                comment_line = line.split(':')[0]
                if comment_line.startswith('#') or comment_line.strip() == '':
                    lines.append(comment_line)
                else:
                    lines.append('')  # Empty line for spacing
            else:
                lines.append(line)

        # Write to file
        with open(output_path, 'w') as f:
            f.write('\n'.join(lines))

        print(f"Configuration saved to: {output_path}")


def main():
    """Main CLI function."""
    parser = argparse.ArgumentParser(
        description="Generate configuration file templates",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # List available templates
  python scripts/config_generator.py --list-templates

  # Generate basic configuration
  python scripts/config_generator.py --template basic --output my_config.yaml

  # Generate hybrid configuration for gear mesh
  python scripts/config_generator.py --template hybrid --task gear_mesh --output gear_hybrid.yaml

  # Generate multi-agent configuration with 4 agents
  python scripts/config_generator.py --template multi_agent --agents 4 --output multi_agent.yaml

  # Generate debug configuration
  python scripts/config_generator.py --template debug --output debug_config.yaml
        """
    )

    parser.add_argument(
        '--template', '-t',
        help="Configuration template to generate"
    )

    parser.add_argument(
        '--output', '-o',
        help="Output configuration file path"
    )

    parser.add_argument(
        '--task',
        default='peg_insert',
        choices=['peg_insert', 'gear_mesh', 'nut_thread'],
        help="Task type for the configuration (default: peg_insert)"
    )

    parser.add_argument(
        '--agents',
        type=int,
        default=3,
        help="Number of agents for multi-agent template (default: 3)"
    )

    parser.add_argument(
        '--list-templates',
        action='store_true',
        help="List available configuration templates"
    )

    args = parser.parse_args()

    # Create generator
    generator = ConfigTemplateGenerator()

    # List templates if requested
    if args.list_templates:
        generator.list_templates()
        return

    # Validate arguments
    if not args.template:
        print("Error: --template is required (or use --list-templates to see options)")
        sys.exit(1)

    if not args.output:
        print("Error: --output is required")
        sys.exit(1)

    try:
        # Generate configuration
        config = generator.generate_config(
            template_name=args.template,
            task=args.task,
            agents=args.agents
        )

        # Save to file
        generator.save_config(config, args.output)

        print("")
        print("✅ Configuration template generated successfully!")
        print(f"📁 File: {args.output}")
        print(f"📋 Template: {args.template}")

        if args.template == 'basic':
            print("")
            print("💡 Next steps:")
            print("   1. Update 'YOUR_ENTITY' in wandb_logging section")
            print("   2. Adjust parameters as needed for your experiment")
            print("   3. Test with: USE_NEW_CONFIG=true python learning/factory_runnerv2.py --config", args.output)

    except Exception as e:
        print(f"❌ Error generating configuration: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()